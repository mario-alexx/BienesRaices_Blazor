@page "/editar-propiedad/{Id:int}"
@using Modelos.DTO
@using Repositorio.IRepositorio
@using Servicios
@inject IPropiedadRepositorio PropiedadRepositorio
@inject ICategoriaRepositorio CategoriaRepositorio
@inject IImagenPropiedadRepositorio ImagenPropiedadRepositorio
@inject ISubidaArchivo SubidaArchivo
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime

<h1 class="text-center">Editar Propiedad</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h2 class="text-dark">Editar Propiedad</h2>
            </div>
        </div>
    </div>
    <div class="card-body">
        <EditForm Model="propiedadDTO" OnValidSubmit="@( () => ManejadorOnEditarPropiedad())">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="container">

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Nombre:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="propiedadDTO.Nombre" class="form-control" placeholder="Ingrese el nombre de la propiedad" />
                            <ValidationMessage For="() => propiedadDTO.Nombre"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Descripción:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="propiedadDTO.Descripcion" class="form-control" placeholder="Ingrese la descripción de la propiedad" />
                            <ValidationMessage For="() => propiedadDTO.Descripcion"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Área:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Area" class="form-control" placeholder="Ingrese el área de la propiedad" />
                            <ValidationMessage For="() => propiedadDTO.Area"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Habitaciones:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Habitaciones" class="form-control" placeholder="Ingrese cantidad de habitaciones" />
                            <ValidationMessage For="() => propiedadDTO.Habitaciones"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Baños:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Banios" class="form-control" placeholder="Ingrese la cantidad de baños" />
                            <ValidationMessage For="() => propiedadDTO.Banios"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Parqueadero:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Parqueadero" class="form-control" placeholder="Ingrese la cantidad de parqueaderos" />
                            <ValidationMessage For="() => propiedadDTO.Parqueadero"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Precio:</label>
                        </div>
                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Precio" class="form-control" placeholder="Ingrese el precio de la propiedad" />
                            <ValidationMessage For="() => propiedadDTO.Precio"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Activo:</label>
                        </div>
                        <div class="col-6">
                            <InputCheckbox @bind-Value="propiedadDTO.Activo"/>
                            <ValidationMessage For="() => propiedadDTO.Activo"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Categoría:</label>
                        </div>
                        <div class="col-6">
                            <InputSelect @bind-Value="categoriaSeleccionada.Id" class="form-control">
                                @foreach(var categoria in dropDownCategoriaDTO)
                                {
                                    <option value="@categoria.Id">@categoria.NombreCategoria</option>
                                }

                            </InputSelect>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group" style="padding-top:30px; padding-bottom:30px">
                    <hr/>
                    <h4>Imágenes Propiedad</h4>

                    <InputFile OnChange="ManejadorOnSubidaArchivo" multiple/>
                    
                    <div class="row">
                        @if(IniciadoProcesoSubidaImagen)
                        {
                            <div class="col-md-12">
                                <span><i class="bi bi-arrow-repeat"></i> Porfavor espere mientras suben las imágenes</span>
                            </div>
                        }

                        @if (propiedadDTO.UrlImagenes != null && propiedadDTO.UrlImagenes.Count > 0)
                        {
                            int serial = 1;
                            foreach (var imagenPropiedad in propiedadDTO.UrlImagenes)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="imagen-propiedad" style="background: url('@imagenPropiedad') 50% 50%">
                                        <span class="titulo-imagen-propiedad">@serial</span>
                                    </div>

                                    <button type="button" @onclick="() => BorrarImagen(imagenPropiedad)" class="btn btn-outline-danger btn-block mt-4">
                                        Borrar
                                    </button>
                                </div>
                                serial++;
                            }
                        }
                    </div>
                </div>
                               
                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <button type="submit" class="btn btn-success"><i class="bi bi-gear-fill"></i>&nbsp; Actualizar</button>
                        </div>
                        <div class="col-6">
                            <NavLink href="propiedades" class="btn btn-secondary"><i class="bi bi-arrow-left-circle-fill"></i>&nbsp; Volver</NavLink>
                        </div>
                    </div>
                </div>
                <br />
            </div>
        </EditForm>
    </div>
</div>


@code {
    private PropiedadDTO propiedadDTO { get; set; } = new PropiedadDTO();
    private DropDownCategoriaDTO categoriaSeleccionada = new DropDownCategoriaDTO();
    private bool IniciadoProcesoSubidaImagen { get; set; } = false;
    private ImagenPropiedadDTO imagenDTO { get; set; } = new ImagenPropiedadDTO();
    
    [Parameter]
    public int? Id { get; set; }

    // Obtener la lista de categorias del dropdown
    private IEnumerable<DropDownCategoriaDTO> dropDownCategoriaDTO { get; set; } = new List<DropDownCategoriaDTO>();

    protected override async Task OnInitializedAsync()
    {
        dropDownCategoriaDTO = await CategoriaRepositorio.GetDropDownCategorias();

        if(Id != null)
        {
            propiedadDTO = await PropiedadRepositorio.GetPropiedad(Id.Value);

            if(propiedadDTO?.ImagenPropiedad != null)
            {
                propiedadDTO.UrlImagenes = propiedadDTO.ImagenPropiedad.
                                        Select(u => u.UrlImagenPropiedad).ToList();
            }
        }
    }

    private async Task ManejadorOnEditarPropiedad()
    {
        // var nombrePropiedad = await PropiedadRepositorio.NombrePropiedadExiste(propiedadDTO.Nombre);
        // if(nombrePropiedad != null)
        // {
        //     await JsRuntime.ToastrError("El nombrde la propiedad ya existe");
        //     return;
        // }
        // propiedadDTO.CategoriaId = categoriaSeleccionada.Id;
        // var crearPropiedad = await PropiedadRepositorio.CrearPropiedad(propiedadDTO);
        // await AgregarImagenesPropiedad(crearPropiedad);
        // await JsRuntime.ToastrSuccess("Propiedad crada correctamente");
        // navigationManager.NavigateTo("propiedades");
    
        
        
    
    }

    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        IniciadoProcesoSubidaImagen = true;
        try
        {
            var imagenes = new List<string>();
            if(e.GetMultipleFiles().Count() > 0) // Si hay mas de 1 img
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if(fileInfo.Extension.ToLower() == ".jpg"
                       || fileInfo.Extension.ToLower() == ".png"
                       || fileInfo.Extension.ToLower() == ".jpeg"
                    )
                    {
                        var uploadedImagePatch = await SubidaArchivo.SubirArchivo(file);
                        imagenes.Add(uploadedImagePatch);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Porfavor seleccione unicamente .jpg/.jpeg/.png");
                        return;
                    }
                }

                if(imagenes.Any())
                {
                    if(propiedadDTO.UrlImagenes != null && propiedadDTO.UrlImagenes.Any())
                    {
                        propiedadDTO.UrlImagenes.AddRange(imagenes);
                    } 
                    else
                    {
                        propiedadDTO.UrlImagenes = new List<string>();
                        propiedadDTO.UrlImagenes.AddRange(imagenes);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Fallo la subida de imágenes");
                    return;
                }
            }
            IniciadoProcesoSubidaImagen = false;
        }
        catch (Exception)
        {
            throw;
        }
    }

    internal async Task BorrarImagen(string urlImagen)
    {
        try
        {
            var imagenIndex = propiedadDTO.UrlImagenes.FindIndex(x => x == urlImagen);
            var nombreImagen = urlImagen.Replace($"{navigationManager.BaseUri}ImagenesPropiedades/", "");

            if (propiedadDTO.Id == 0)
            {
                var result = SubidaArchivo.BorrarArchivo(nombreImagen);
            }
            propiedadDTO.UrlImagenes.RemoveAt(imagenIndex);
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
            return;
        }
    }

    private async Task AgregarImagenesPropiedad(PropiedadDTO propDTO)
    {
        foreach (var urlImagen in propiedadDTO.UrlImagenes)
        {
            if(propiedadDTO.ImagenPropiedad == null || 
                propiedadDTO.ImagenPropiedad.Where(x => x.UrlImagenPropiedad == urlImagen).Count() > 0)
            {
                imagenDTO = new()
                {
                    PropiedadId = propDTO.Id,
                    UrlImagenPropiedad = urlImagen
                };
                await ImagenPropiedadRepositorio.CrearPropiedadImagen(imagenDTO);
            }
        }
    }
}
